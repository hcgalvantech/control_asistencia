import os
import json
import pandas as pd
from supabase import create_client, Client
from dotenv import load_dotenv
import sys

# Cargar variables de entorno desde .env
load_dotenv()

# Configuración de Supabase
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

if not SUPABASE_URL or not SUPABASE_KEY:
    print("Error: Las variables de entorno SUPABASE_URL y SUPABASE_KEY son requeridas.")
    print("Crea un archivo .env con estas variables o configúralas en tu entorno.")
    sys.exit(1)

# Conectar a Supabase
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

def create_tables():
    """Crear tablas en Supabase mediante SQL"""
    
    print("Creando tablas en la base de datos 'asistencia_app'...")
    
    # 1. Tabla estudiantes
    students_table = """
    create table if not exists students (
        id bigint generated by default as identity primary key,
        apellido_nombre varchar not null,
        dni varchar not null,
        telefono varchar,
        correo varchar,
        tecnicatura varchar,
        materia varchar not null,
        comision varchar not null,
        created_at timestamp with time zone default now(),
        unique(dni, materia, comision)
    );
    """
    
    # 2. Tabla asistencia
    attendance_table = """
    create table if not exists attendance (
        id bigint generated by default as identity primary key,
        dni varchar not null,
        nombre varchar not null,
        materia varchar not null,
        comision varchar not null,
        fecha date not null,
        hora time not null,
        dispositivo varchar,
        ip varchar,
        device_id varchar,
        created_at timestamp with time zone default now(),
        unique(dni, materia, fecha)
    );
    """
    
    # 3. Tabla horarios
    schedule_table = """
    create table if not exists schedule (
        id bigint generated by default as identity primary key,
        materia varchar not null,
        comision varchar not null,
        fecha varchar,
        hora_inicio varchar not null,
        hora_final varchar not null,
        created_at timestamp with time zone default now()
    );
    """
    
    # 4. Tabla códigos de clase
    classroom_codes_table = """
    create table if not exists classroom_codes (
        id bigint generated by default as identity primary key,
        code varchar not null,
        subject varchar not null,
        commission varchar not null,
        expiry_time timestamp with time zone not null,
        created_at timestamp with time zone default now(),
        unique(code)
    );
    """
    
    # 5. Tabla configuración admin
    admin_config_table = """
    create table if not exists admin_config (
        id bigint generated by default as identity primary key,
        allowed_ip_ranges jsonb,
        admin_username varchar not null,
        admin_password varchar not null,
        created_at timestamp with time zone default now()
    );
    """
    
    # 6. Tabla códigos de verificación
    verification_codes_table = """
    create table if not exists verification_codes (
        id bigint generated by default as identity primary key,
        dni varchar not null,
        phone varchar not null,
        code varchar not null,
        timestamp timestamp with time zone default now(),
        verified boolean default false,
        created_at timestamp with time zone default now()
    );
    """
    
    # 7. Tabla uso de dispositivos
    device_usage_table = """
    create table if not exists device_usage (
        id bigint generated by default as identity primary key,
        device_id varchar not null,
        dni varchar not null,
        materia varchar not null,
        fecha date not null,
        timestamp timestamp with time zone not null,
        created_at timestamp with time zone default now(),
        unique(device_id, materia, fecha)
    );
    """
    
    # Ejecutar cada consulta SQL para crear las tablas
    tables = [
        ("students", students_table),
        ("attendance", attendance_table),
        ("schedule", schedule_table),
        ("classroom_codes", classroom_codes_table),
        ("admin_config", admin_config_table),
        ("verification_codes", verification_codes_table),
        ("device_usage", device_usage_table)
    ]
    
    for name, sql in tables:
        try:
            # Usar el método rpc para ejecutar SQL personalizado
            supabase.rpc("exec_sql", {"sql": sql}).execute()
            print(f"✅ Tabla '{name}' creada exitosamente")
        except Exception as e:
            print(f"❌ Error al crear tabla '{name}': {str(e)}")
            
    print("Configuración inicial de tablas completada.")

def migrate_csv_data():
    """Migrar datos desde archivos CSV a Supabase"""
    
    if not os.path.exists('data'):
        print("Carpeta 'data' no encontrada.")
        return
        
    print("\nMigrando datos CSV existentes...")
    
    # 1. Migrar estudiantes
    if os.path.exists('data/students.csv'):
        try:
            # Leer datos del CSV
            # Modifica la sección de migración de estudiantes en la función migrate_csv_data()
            # Reemplaza el código de lectura del CSV con esto:

            df = pd.read_csv('data/students.csv')

            # Mapeo de columnas
            column_mapping = {
                'DNI': 'dni',
                'APELLIDO Y NOMBRE': 'nombre',
                'TECNICATURA': 'tecnicatura',
                'MATERIA': 'materia',
                'COMISION': 'comision',
                'TELEFONO': 'telefono',
                'INICIO': 'hora_inicio',
                'FINAL': 'hora_final'
            }

            # Aplicar renombramiento
            df.rename(columns=column_mapping, inplace=True)

            # Reindex y asegurarnos que tenemos las columnas correctas
            columns = ['dni', 'nombre', 'tecnicatura', 'materia', 'comision', 'telefono', 'hora_inicio', 'hora_final']
            df = df.reindex(columns=columns, fill_value=None)

            # Importante: Reemplazar NaN con None para evitar el error JSON
            df = df.where(pd.notnull(df), None)

            # Si dni y telefono deben ser strings:
            if 'dni' in df.columns:
                df['dni'] = df['dni'].apply(lambda x: str(int(x)) if pd.notnull(x) and x is not None else None)
            if 'telefono' in df.columns:
                df['telefono'] = df['telefono'].apply(lambda x: str(int(x)) if pd.notnull(x) and x is not None else None)

            # Convertir a records
            records = df.to_dict('records')
            
            if records:
                # Insertar los registros en bloques de 50 para evitar sobrecarga
                for i in range(0, len(records), 50):
                    batch = records[i:i+50]
                    result = supabase.table('students').insert(batch).execute()
                    print(f"  Insertados registros {i+1}-{min(i+50, len(records))}")
                
                print(f"✅ Migrados {len(records)} estudiantes")
            else:
                print("⚠️ El archivo students.csv está vacío")
        except Exception as e:
            print(f"❌ Error al migrar estudiantes: {str(e)}")
    else:
        print("⚠️ Archivo students.csv no encontrado")
    
    # 2. Migrar asistencia
    if os.path.exists('data/attendance.csv'):
        try:
            df = pd.read_csv('data/attendance.csv')
            
            # Renombrar columnas
            column_mapping = {
                'DNI': 'dni',
                'APELLIDO Y NOMBRE': 'nombre',
                'MATERIA': 'materia',
                'COMISION': 'comision',
                'FECHA': 'fecha',
                'HORA': 'hora',
                'DISPOSITIVO': 'dispositivo',
                'IP': 'ip',
                'DEVICE_ID': 'device_id'
            }
            
            df.rename(columns=column_mapping, inplace=True)
            
            # Asegurarse de que solo tenemos las columnas necesarias
            columns = ['dni', 'nombre', 'materia', 'comision', 'fecha', 'hora', 'dispositivo', 'ip', 'device_id']
            df = df.reindex(columns=columns, fill_value=None)
            
            records = df.to_dict('records')
            
            if records:
                for i in range(0, len(records), 50):
                    batch = records[i:i+50]
                    supabase.table('attendance').insert(batch).execute()
                    print(f"  Insertados registros {i+1}-{min(i+50, len(records))}")
                
                print(f"✅ Migrados {len(records)} registros de asistencia")
            else:
                print("⚠️ El archivo attendance.csv está vacío")
        except Exception as e:
            print(f"❌ Error al migrar asistencia: {str(e)}")
    else:
        print("⚠️ Archivo attendance.csv no encontrado")
    
    # 3. Migrar horarios
    if os.path.exists('data/schedule.csv'):
        try:
            df = pd.read_csv('data/schedule.csv')
            
            # Renombrar columnas
            column_mapping = {
                'MATERIA': 'materia',
                'COMISION': 'comision',
                'FECHA': 'fecha',
                'INICIO': 'hora_inicio',
                'FINAL': 'hora_final'
            }
            
            df.rename(columns=column_mapping, inplace=True)
            
            # Asegurarse de que solo tenemos las columnas necesarias
            columns = ['materia', 'comision', 'fecha', 'hora_inicio', 'hora_final']
            df = df.reindex(columns=columns, fill_value=None)
            
            records = df.to_dict('records')
            
            if records:
                for i in range(0, len(records), 50):
                    batch = records[i:i+50]
                    supabase.table('schedule').insert(batch).execute()
                    print(f"  Insertados registros {i+1}-{min(i+50, len(records))}")
                
                print(f"✅ Migrados {len(records)} horarios")
            else:
                print("⚠️ El archivo schedule.csv está vacío")
        except Exception as e:
            print(f"❌ Error al migrar horarios: {str(e)}")
    else:
        print("⚠️ Archivo schedule.csv no encontrado")
    
    # 4. Migrar configuración de admin
    if os.path.exists('data/admin_config.json'):
        try:
            with open('data/admin_config.json', 'r') as f:
                admin_config = json.load(f)
                
            # Asegurarnos de que las claves sean correctas
            admin_config = {
                'allowed_ip_ranges': admin_config.get('allowed_ip_ranges', []),
                'admin_username': admin_config.get('admin_username', 'admin'),
                'admin_password': admin_config.get('admin_password', 'admin123')
            }
                
            supabase.table('admin_config').insert(admin_config).execute()
            print(f"✅ Migrada configuración de administrador")
        except Exception as e:
            print(f"❌ Error al migrar configuración de admin: {str(e)}")
    else:
        print("⚠️ Archivo admin_config.json no encontrado")
    
    print("Migración de datos completada.")

def setup_functions():
    """Configurar funciones SQL personalizadas en Supabase"""
    
    # Función para ejecutar SQL personalizado (necesaria para crear tablas)
    exec_sql_function = """
    create or replace function exec_sql(sql text)
    returns void as $$
    begin
        execute sql;
    end;
    $$ language plpgsql security definer;
    """
    
    try:
        # Necesitamos usar SQL directo para crear la función
        # Esto requiere permisos especiales en Supabase
        print("Nota: Para ejecutar este script necesitas crear manualmente la función 'exec_sql'")
        print("Consulta las instrucciones para crear esta función desde el panel SQL de Supabase")
        
        # Intentamos ejecutar la función para ver si ya existe
        supabase.rpc("exec_sql", {"sql": "SELECT 1"}).execute()
        print("✅ Función exec_sql ya existe y funciona correctamente")
    except Exception as e:
        print(f"❌ Error con la función exec_sql: {str(e)}")
        print("Por favor, crea esta función manualmente en Supabase SQL Editor:")
        print(exec_sql_function)
        if input("¿Continuar con la creación de tablas? (s/n): ").lower() != 's':
            sys.exit(1)

if __name__ == "__main__":
    print("🚀 Iniciando configuración de Supabase para la aplicación de asistencia...")
    
    # 1. Configurar funciones necesarias
    setup_functions()
    
    # 2. Crear estructura de tablas
    create_tables()
    
    # 3. Migrar datos existentes
    migrate_csv_data()
    
    print("\n✨ Configuración completada. Base de datos lista para usar.")
    print("Ahora puedes ejecutar tu aplicación conectada a Supabase.")